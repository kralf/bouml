class UmlActivity
!!!194178.cpp!!!	sKind() : string
  return "activity";
!!!194178.java!!!	sKind() : string
  return "activity";
!!!194050.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  chapter("Activity", pfix, rank, "activity", level);
  
  QCString s = description();
  
  if (!s.isEmpty()) {
    fw.write("<p>");
    writeq(description());
    fw.write("<br /></p>");
  }
  
  if (isActive())
    fw.write("<p>Active activity</p>\n");

  UmlOperation * beh = specification();
  
  if (beh != 0) {
    fw.write("<p>Implements ");
    beh->write();
    fw.write("</p>");
  }

  if (isReadOnly()) {
    if (isSingleExecution())
      fw.write("<p>Read only, single execution</p>");
    else
      fw.write("<p>Read only</p>");
  }
  else if (isSingleExecution())
    fw.write("<p>Single execution</p>");

  QCString scpp, sjava;
  
  s = preCondition();
  scpp = cppPreCondition();
  sjava = javaPreCondition();

  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Pre Condition :</p><ul>");
  
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }

    fw.write("</ul>");
  }
  
  s = postCondition();
  scpp = cppPostCondition();
  sjava = javaPostCondition();

  if (!s.isEmpty() || !scpp.isEmpty() || !sjava.isEmpty()) {
    fw.write("<p>Post Condition :</p><ul>");
    
    if (!s.isEmpty()) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (!scpp.isEmpty()) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }

    if (!sjava.isEmpty()) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  if (! constraint().isEmpty()) {
    fw.write("<p> Constraint :</p><ul>");
    writeq(constraint());
    fw.write("</ul>");
  }
 
  UmlActivityDiagram * d = associatedDiagram();
  
  if (d != 0) {
    fw.write("<p>Diagram : ");
    d->write();
    fw.write("</p>");
  }
  
  write_properties();

  write_children(pfix, rank, level);

  unload(FALSE, FALSE);
!!!194050.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  chapter("Activity", pfix, rank, "activity", level);

  String s = description();
  
  if (s.length() != 0) {
    fw.write("<p>");
    writeq(description());
    fw.write("<br /></p>");
  }
  
  if (isActive())
    fw.write("<p>Active activity</p>\n");

  UmlOperation beh = specification();
  
  if (beh != null) {
    fw.write("<p>Implements ");
    beh.write();
    fw.write("</p>");
  }

  if (isReadOnly()) {
    if (isSingleExecution())
      fw.write("<p>Read only, single execution</p>");
    else
      fw.write("<p>Read only</p>");
  }
  else if (isSingleExecution())
    fw.write("<p>Single execution</p>");

  String scpp, sjava;
  
  s = preCondition();
  scpp = cppPreCondition();
  sjava = javaPreCondition();

  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Pre Condition :</p><ul>");
    
    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }
  
  s = postCondition();
  scpp = cppPostCondition();
  sjava = javaPostCondition();

  if ((s.length() != 0) || (scpp.length() != 0) || (sjava.length() != 0)) {
    fw.write("<p>Post Condition :</p><ul>");
    
    if (s.length() != 0) {
      fw.write("<li>OCL : <pre>\n");
      writeq(s);
      fw.write("</pre></li>");
    }
    
    if (scpp.length() != 0) {
      fw.write("<li>C++ : <pre>\n");
      writeq(scpp);
      fw.write("</pre></li>");
    }
    
    if (sjava.length() != 0) {
      fw.write("<li>Java : <pre>\n");
      writeq(sjava);
      fw.write("</pre></li>");
    }
    
    fw.write("</ul>");
  }

  s = constraint();
  
  if (s.length() != 0) {
    fw.write("<p> Constraint :</p><ul>");
    writeq(s);
    fw.write("</ul>");
  }
 
  UmlActivityDiagram d = associatedDiagram();
  
  if (d != null) {
    fw.write("<p>Diagram : ");
    d.write();
    fw.write("</p>");
  }
  
  write_properties();

  write_children(pfix, rank, level);

  unload(false, false);
!!!193922.cpp!!!	memo_ref() : void
  activities.addElement(this);
  UmlItem::memo_ref();
!!!193922.java!!!	memo_ref() : void
  activities.addElement(this);
  super.memo_ref();

!!!193794.cpp!!!	ref_index() : void
  if (!activities.isEmpty())
    fw.write("<a href=\"activities.html\" target = \"projectFrame\"><b> -Activities- </b></a>");
!!!193794.java!!!	ref_index() : void
  if (!activities.isEmpty())
    fw.write("<a href=\"activities.html\" target = \"projectFrame\"><b> -Activities- </b></a>");
!!!193666.cpp!!!	generate_index() : void
  UmlItem::generate_index(activities, "Activities", "activities");
!!!193666.java!!!	generate_index() : void
  generate_index(activities, "Activities", "activities");
!!!193538.cpp!!!	chapterp() : bool
  return TRUE;
!!!193538.java!!!	chapterp() : bool
  return true;
