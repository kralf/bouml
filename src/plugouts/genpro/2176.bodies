class UmlBaseAttribute
!!!27904.cpp!!!	create(inout parent : UmlClass, in s : str) : UmlAttribute
  return (UmlAttribute *) parent->create_(anAttribute, s);
!!!27904.java!!!	create(inout parent : UmlClass, in s : str) : UmlAttribute
  return (UmlAttribute) parent.create_(anItemKind.anAttribute, s);
!!!28032.cpp!!!	kind() : anItemKind
  return anAttribute;
!!!28032.java!!!	kind() : anItemKind
  return anItemKind.anAttribute;
!!!28160.cpp!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!28160.java!!!	isReadOnly() : bool
  read_if_needed_();
  
  return _read_only;
!!!28288.cpp!!!	set_isReadOnly(in y : bool) : bool
  return set_it_(_read_only, y, setIsReadOnlyCmd);
!!!28288.java!!!	set_isReadOnly(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsReadOnlyCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _read_only =  y;
!!!28416.cpp!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!28416.java!!!	defaultValue() : string
  read_if_needed_();
  
  return _default_value;
!!!28544.cpp!!!	set_DefaultValue(in s : str) : bool
  return set_it_(_default_value, s, setDefaultValueCmd);
!!!28544.java!!!	set_DefaultValue(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setDefaultValueCmd, s);
  UmlCom.check();

  _default_value = s;
!!!28672.cpp!!!	type() : UmlTypeSpec
  read_if_needed_();
  
  return _type;
!!!28672.java!!!	type() : UmlTypeSpec
  read_if_needed_();
  
  return _type;
!!!28800.cpp!!!	set_Type(in t : UmlTypeSpec) : bool
  return set_it_(_type, t, setTypeCmd);
!!!28800.java!!!	set_Type(in t : UmlTypeSpec) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setTypeCmd, t);
  UmlCom.check();

  _type = t;
!!!28928.cpp!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!28928.java!!!	getOperation() : UmlOperation
  read_if_needed_();
  
  return _get_oper;
!!!29056.cpp!!!	addGetOperation() : bool
  UmlCom::send_cmd(_identifier, addGetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!29056.java!!!	addGetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addGetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!29184.cpp!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!29184.java!!!	setOperation() : UmlOperation
  read_if_needed_();
  
  return _set_oper;
!!!29312.cpp!!!	addSetOperation() : bool
  UmlCom::send_cmd(_identifier, addSetOperCmd);
  if (UmlCom::read_bool()) {
    reread_children_if_needed_();
    return TRUE;
  }
 else
   return FALSE;
!!!29312.java!!!	addSetOperation() : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.addSetOperCmd);
  UmlCom.check();
  
  reread_children_if_needed_();

!!!29440.cpp!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!29440.java!!!	isCppMutable() : bool
  read_if_needed_();
  
  return _cpp_mutable;
!!!29568.cpp!!!	set_isCppMutable(in y : bool) : bool
  return set_it_(_cpp_mutable, y, setIsCppMutableCmd);
!!!29568.java!!!	set_isCppMutable(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsCppMutableCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _cpp_mutable = y;
!!!29696.cpp!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!29696.java!!!	isJavaTransient() : bool
  read_if_needed_();
  
  return _java_transient;
!!!29824.cpp!!!	set_isJavaTransient(in y : bool) : bool
  return set_it_(_java_transient, y, setIsJavaTransientCmd);

!!!29824.java!!!	set_isJavaTransient(in y : bool) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIsJavaTransientCmd, (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _java_transient = y;
!!!29952.cpp!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != 0) ? _idl_case->name() : _idl_explicit_case;
!!!29952.java!!!	idlCase() : string
  read_if_needed_();
  
  return (_idl_case != null) ? _idl_case.name() : _idl_explicit_case;
!!!30080.cpp!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, a->_identifier, "");
  if (UmlCom::read_bool()) {
    _idl_case = a;
    _idl_explicit_case = 0;
    return TRUE;
  }
 else
   return FALSE;
!!!30080.java!!!	set_IdlCase(inout a : UmlAttribute) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, a.identifier_(), "");
  UmlCom.check();
  
  _idl_case = a;
  _idl_explicit_case = null;
!!!30208.cpp!!!	set_IdlCase(in s : str) : bool
  UmlCom::send_cmd(_identifier, setIdlCaseCmd, (void *) 0, s);
  if (UmlCom::read_bool()) {
    _idl_case = 0;
    _idl_explicit_case = s;
    return TRUE;
  }
 else
   return FALSE;
!!!30208.java!!!	set_IdlCase(in s : str) : bool
  UmlCom.send_cmd(identifier_(), OnInstanceCmd.setIdlCaseCmd, (long) 0, s);
  UmlCom.check();
  
  _idl_case = null;
  _idl_explicit_case = s;

!!!30336.cpp!!!	unload(in rec : bool, in del : bool) : void
  _type.explicit_type = 0;
  _default_value = 0;
#ifdef WITHIDL
  _idl_explicit_case = 0;
#endif
  UmlBaseClassMember::unload(rec, del);
!!!30336.java!!!	unload(in rec : bool, in del : bool) : void
  _type = null;
  _default_value = null;
  _idl_explicit_case = null;
  super.unload(rec, del);
!!!30464.cpp!!!	UmlBaseAttribute(in id : item_id, in n : string)
  _get_oper = 0;
  _set_oper = 0;
  
#ifdef WITHIDL
  _idl_case = 0;
#endif
!!!30592.cpp!!!	read_uml_() : void
  UmlBaseClassMember::read_uml_();
  _type.type = (UmlClass *) UmlBaseItem::read_();
  if (_type.type == 0)
    _type.explicit_type = UmlCom::read_string();
  _default_value = UmlCom::read_string();
  _read_only = UmlCom::read_bool();
  _get_oper = (UmlOperation *) UmlBaseItem::read_();
  _set_oper = (UmlOperation *) UmlBaseItem::read_();
!!!30592.java!!!	read_uml_() : void
  super.read_uml_();
  _type = new UmlTypeSpec();
  _type.type = (UmlClass) UmlBaseItem.read_();
  if (_type.type == null)
    _type.explicit_type = UmlCom.read_string();
  _default_value = UmlCom.read_string();
  _read_only = UmlCom.read_bool();
  _get_oper = (UmlOperation) UmlBaseItem.read_();
  _set_oper = (UmlOperation) UmlBaseItem.read_();
!!!30720.cpp!!!	read_cpp_() : void
  UmlBaseClassMember::read_cpp_();
  _cpp_mutable = UmlCom::read_bool();
!!!30720.java!!!	read_cpp_() : void
  super.read_cpp_();
  _cpp_mutable = UmlCom.read_bool();
!!!30848.cpp!!!	read_java_() : void
  UmlBaseClassItem::read_java_();
  _java_transient = UmlCom::read_bool();
!!!30848.java!!!	read_java_() : void
  super.read_java_();
  _java_transient = UmlCom.read_bool();
!!!30976.cpp!!!	read_idl_() : void
  UmlBaseClassItem::read_idl_();
  _idl_case = (UmlAttribute *) UmlBaseItem::read_();
  if (_idl_case == 0)
    _idl_explicit_case = UmlCom::read_string();
!!!30976.java!!!	read_idl_() : void
  super.read_idl_();
  _idl_case = (UmlAttribute) UmlBaseItem.read_();
  if (_idl_case == null)
    _idl_explicit_case = UmlCom.read_string();
