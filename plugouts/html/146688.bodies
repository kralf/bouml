class PhpSettings
!!!211584.cpp!!!	useDefaults() : bool
  UmlCom::send_cmd(phpSettingsCmd, getPhpUseDefaultsCmd);
  return UmlCom::read_bool();
!!!211584.java!!!	useDefaults() : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._getPhpUseDefaultsCmd);
  return UmlCom.read_bool();
!!!211712.cpp!!!	set_UseDefaults(in y : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpUseDefaultsCmd, (char) y);
  return UmlCom::read_bool();
!!!211712.java!!!	set_UseDefaults(in y : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpUseDefaultsCmd,
		  (y) ? (byte) 1 : (byte) 0);
  UmlCom.check();
!!!211840.cpp!!!	classStereotype(in s : string) : string
  read_if_needed_();
  
  UmlStereotype * b = UmlSettings::_map_class_stereotypes.find(s);
  
  return (b) ? b->php : s;
!!!211840.java!!!	classStereotype(in s : string) : string
  read_if_needed_();
  
  UmlStereotype b = (UmlStereotype) UmlSettings._map_class_stereotypes.get(s);
  
  return (b != null) ? b.php : s;
!!!211968.cpp!!!	set_ClassStereotype(in s : string, in v : string) : bool
  read_if_needed_();
  UmlCom::send_cmd(phpSettingsCmd, setPhpClassStereotypeCmd, s, v);
  if (UmlCom::read_bool()) {
    UmlStereotype * st = UmlSettings::_map_class_stereotypes.find(s);

    if (st == 0)
      st = UmlSettings::add_class_stereotype(s);
    st->php = v;
    
    return TRUE;
  }
  else
    return FALSE;
!!!211968.java!!!	set_ClassStereotype(in s : string, in v : string) : bool
  read_if_needed_();
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpClassStereotypeCmd, s, v);
  UmlCom.check();

  UmlStereotype st = (UmlStereotype) UmlSettings._map_class_stereotypes.get(s);

  if (st == null)
    st = UmlSettings.add_class_stereotype(s);
  st.php = v;
!!!220672.cpp!!!	classUmlStereotype(in s : string) : string
  read_if_needed_();
  
  return UmlSettings::uml_class_stereotype(s, &UmlStereotype::php);
!!!220672.java!!!	classUmlStereotype(in s : string) : string
  read_if_needed_();
  
  int index = _class_stereotypes.length;
  
  while (index-- != 0)
    if (_class_stereotypes[index].php.equals(s))
      return _class_stereotypes[index].uml;
  
  return null;
!!!212096.cpp!!!	rootDir() : string
  read_if_needed_();
  
  return _root;
!!!212096.java!!!	rootDir() : string
  read_if_needed_();
  
  return _root;
!!!212224.cpp!!!	set_RootDir(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpRootdirCmd, v);
  if (UmlCom::read_bool()) {
    _root = v;
    return TRUE;
  }
  else
    return FALSE;
!!!212224.java!!!	set_RootDir(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpRootdirCmd, v);
  UmlCom.check();

  _root = v;
!!!212352.cpp!!!	sourceContent() : string
  read_if_needed_();
  
  return _src_content;
!!!212352.java!!!	sourceContent() : string
  read_if_needed_();
  
  return _src_content;
!!!212480.cpp!!!	set_SourceContent(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpSourceContentCmd, v);
  if (UmlCom::read_bool()) {
    _src_content = v;
    return TRUE;
  }
  else
    return FALSE;
!!!212480.java!!!	set_SourceContent(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpSourceContentCmd, v);
  UmlCom.check();
  
  _src_content = v;

!!!212608.cpp!!!	sourceExtension() : string
  read_if_needed_();
  
  return _ext; 
!!!212608.java!!!	sourceExtension() : string
  read_if_needed_();
  
  return _ext; 
!!!212736.cpp!!!	set_SourceExtension(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpSourceExtensionCmd, v);
  if (UmlCom::read_bool()) {
    _ext = v;
    return TRUE;
  }
  else
    return FALSE;
!!!212736.java!!!	set_SourceExtension(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpSourceExtensionCmd, v);
  UmlCom.check();
  
  _ext = v;

!!!265984.cpp!!!	reverseRoundtripDirRegExp() : string
  read_if_needed_();

  return _dir_regexp;
!!!265984.java!!!	reverseRoundtripDirRegExp() : string
  read_if_needed_();

  return _dir_regexp;
!!!266112.cpp!!!	isReverseRoundtripDirRegExpCaseSensitive() : bool
  read_if_needed_();

  return _dir_regexp_case_sensitive;
!!!266112.java!!!	isReverseRoundtripDirRegExpCaseSensitive() : bool
  read_if_needed_();

  return _dir_regexp_case_sensitive;
!!!266240.cpp!!!	set_ReverseRoundtripDirRegExp(in s : string, in cs : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpDirRevFilterCmd, s, cs);
  if (UmlCom::read_bool()) {
    _dir_regexp = s;
    _dir_regexp_case_sensitive = cs;
    return TRUE;
  }
  else
    return FALSE;
!!!266240.java!!!	set_ReverseRoundtripDirRegExp(in s : string, in cs : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpDirRevFilterCmd, s, cs);
  UmlCom.check();
  _dir_regexp = s;
  _dir_regexp_case_sensitive = cs;
!!!266368.cpp!!!	reverseRoundtripFileRegExp() : string
  read_if_needed_();

  return _file_regexp;
!!!266368.java!!!	reverseRoundtripFileRegExp() : string
  read_if_needed_();

  return _file_regexp;
!!!266496.cpp!!!	isReverseRoundtripFileRegExpCaseSensitive() : bool
  read_if_needed_();

  return _file_regexp_case_sensitive;
!!!266496.java!!!	isReverseRoundtripFileRegExpCaseSensitive() : bool
  read_if_needed_();

  return _file_regexp_case_sensitive;
!!!266624.cpp!!!	set_ReverseRoundtripFileRegExp(in s : string, in cs : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpFileRevFilterCmd, s, cs);
  if (UmlCom::read_bool()) {
    _file_regexp = s;
    _file_regexp_case_sensitive = cs;
    return TRUE;
  }
  else
    return FALSE;
!!!266624.java!!!	set_ReverseRoundtripFileRegExp(in s : string, in cs : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpFileRevFilterCmd, s, cs);
  UmlCom.check();
  _file_regexp = s;
  _file_regexp_case_sensitive = cs;
!!!263680.cpp!!!	requireOnceWithPath() : bool
  read_if_needed_();

  return _req_with_path;
!!!263680.java!!!	requireOnceWithPath() : bool
  read_if_needed_();

  return _req_with_path;
!!!263808.cpp!!!	set_RequireOnceWithPath(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpRequireOnceWithPathCmd, v);
  if (UmlCom::read_bool()) {
    _req_with_path = v;
    return TRUE;
  }
  else
    return FALSE;
!!!263808.java!!!	set_RequireOnceWithPath(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpRequireOnceWithPathCmd,
		   (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();
  _req_with_path = v;
!!!263936.cpp!!!	isRelativePath() : bool
  read_if_needed_();

  return _is_relative_path;
!!!263936.java!!!	isRelativePath() : bool
  read_if_needed_();

  return _is_relative_path;
!!!264064.cpp!!!	set_IsRelativePath(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpRelativePathCmd, v);
  if (UmlCom::read_bool()) {
    _is_relative_path = v;
    if (v) _is_root_relative_path = FALSE;
    return TRUE;
  }
  else
    return FALSE;
!!!264064.java!!!	set_IsRelativePath(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpRelativePathCmd,
		   (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();
  _is_relative_path = v;
  if (v) _is_root_relative_path = false;
!!!264192.cpp!!!	isRootRelativePath() : bool
  read_if_needed_();

  return _is_root_relative_path;
!!!264192.java!!!	isRootRelativePath() : bool
  read_if_needed_();

  return _is_root_relative_path;
!!!264320.cpp!!!	set_IsRootRelativePath(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpRootRelativePathCmd, v);
  if (UmlCom::read_bool()) {
    _is_root_relative_path = v;
    if (v) _is_relative_path = FALSE;
    return TRUE;
  }
  else
    return FALSE;
!!!264320.java!!!	set_IsRootRelativePath(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpRootRelativePathCmd,
		   (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();
  _is_root_relative_path = v;
  if (v) _is_relative_path = false;
!!!267136.cpp!!!	isForceNamespacePrefixGeneration() : bool
  read_if_needed_();

  return _is_force_namespace_gen;
!!!267136.java!!!	isForceNamespacePrefixGeneration() : bool
  read_if_needed_();

  return _is_force_namespace_gen;
!!!267264.cpp!!!	set_IsForceNamespacePrefixGeneration(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpForceNamespaceGenCmd, v);
  if (UmlCom::read_bool()) {
    _is_force_namespace_gen = v;
    return TRUE;
  }
  else
    return FALSE;
!!!267264.java!!!	set_IsForceNamespacePrefixGeneration(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpForceNamespaceGenCmd,
		   (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();
  _is_force_namespace_gen = v;
!!!231936.cpp!!!	isGenerateJavadocStyleComment() : bool
  read_if_needed_();

  return _is_generate_javadoc_comment;
!!!231936.java!!!	isGenerateJavadocStyleComment() : bool
  read_if_needed_();

  return _is_generate_javadoc_comment;
!!!232064.cpp!!!	set_IsGenerateJavadocStyleComment(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpJavadocStyleCmd, v);
  if (UmlCom::read_bool()) {
    _is_generate_javadoc_comment = v;
    return TRUE;
  }
  else
    return FALSE;
!!!232064.java!!!	set_IsGenerateJavadocStyleComment(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpJavadocStyleCmd,
		   (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();
  _is_generate_javadoc_comment = v;
!!!212864.cpp!!!	classDecl() : string
  read_if_needed_();
  
  return _class_decl;
!!!212864.java!!!	classDecl() : string
  read_if_needed_();
  
  return _class_decl;
!!!212992.cpp!!!	set_ClassDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpClassDeclCmd, v);
  if (UmlCom::read_bool()) {
    _class_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!212992.java!!!	set_ClassDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpClassDeclCmd, v);
  UmlCom.check();
  
  _class_decl = v;

!!!213120.cpp!!!	externalClassDecl() : string
  read_if_needed_();
  
  return _external_class_decl;
!!!213120.java!!!	externalClassDecl() : string
  read_if_needed_();
  
  return _external_class_decl;
!!!213248.cpp!!!	set_ExternalClassDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpExternalClassDeclCmd, v);
  if (UmlCom::read_bool()) {
    _external_class_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!213248.java!!!	set_ExternalClassDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpExternalClassDeclCmd, v);
  UmlCom.check();
  
  _external_class_decl = v;

!!!213376.cpp!!!	enumDecl() : string
  read_if_needed_();
  
  return _enum_decl;
!!!213376.java!!!	enumDecl() : string
  read_if_needed_();
  
  return _enum_decl;
!!!213504.cpp!!!	set_EnumDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpEnumDeclCmd, v);
  if (UmlCom::read_bool()) {
    _enum_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!213504.java!!!	set_EnumDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpEnumDeclCmd, v);
  UmlCom.check();
  
  _enum_decl = v;
!!!213632.cpp!!!	interfaceDecl() : string
  read_if_needed_();
  
  return _interface_decl;
!!!213632.java!!!	interfaceDecl() : string
  read_if_needed_();
  
  return _interface_decl;
!!!213760.cpp!!!	set_InterfaceDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpInterfaceDeclCmd, v);
  if (UmlCom::read_bool()) {
    _interface_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!213760.java!!!	set_InterfaceDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpInterfaceDeclCmd, v);
  UmlCom.check();
  
  _interface_decl = v;

!!!213888.cpp!!!	attributeDecl() : string
  read_if_needed_();

  return _attr_decl;
!!!213888.java!!!	attributeDecl() : string
  read_if_needed_();

  return _attr_decl;
!!!214016.cpp!!!	set_AttributeDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpAttributeDeclCmd, v);
  if (UmlCom::read_bool()) {
    _attr_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!214016.java!!!	set_AttributeDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpAttributeDeclCmd, v);
  UmlCom.check();

  _attr_decl = v;
!!!214144.cpp!!!	enumItemDecl() : string
  read_if_needed_();
  
  return _enum_item_decl;
!!!214144.java!!!	enumItemDecl() : string
  read_if_needed_();
  
  return _enum_item_decl;
!!!214272.cpp!!!	set_EnumItemDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpEnumItemDeclCmd, v);
  if (UmlCom::read_bool()) {
    _enum_item_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!214272.java!!!	set_EnumItemDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpEnumItemDeclCmd, v);
  UmlCom.check();
    
  _enum_item_decl = v;
!!!214400.cpp!!!	relationDecl() : string
  read_if_needed_();

  return _rel_decl;
!!!214400.java!!!	relationDecl() : string
  read_if_needed_();

  return _rel_decl;
!!!214528.cpp!!!	set_RelationDecl(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpRelationDeclCmd, v);
  if (UmlCom::read_bool()) {
    _rel_decl = v;
    return TRUE;
  }
  else
    return FALSE;
!!!214528.java!!!	set_RelationDecl(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpRelationDeclCmd, v);
  UmlCom.check();

  _rel_decl = v;
!!!214656.cpp!!!	operationDef() : string
  read_if_needed_();
  
  return _oper_def;
!!!214656.java!!!	operationDef() : string
  read_if_needed_();
  
  return _oper_def;
!!!214784.cpp!!!	set_OperationDef(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpOperationDefCmd, v);
  if (UmlCom::read_bool()) {
    _oper_def = v;
    return TRUE;
  }
  else
    return FALSE;
!!!214784.java!!!	set_OperationDef(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpOperationDefCmd, v);
  UmlCom.check();
  
  _oper_def = v;

!!!214912.cpp!!!	getVisibility() : aVisibility
#ifdef WITHJAVA
  return JavaSettings::getVisibility();
#else
  read_if_needed_();
  
  return _get_visibility;
#endif
!!!214912.java!!!	getVisibility() : aVisibility
  return JavaSettings.getVisibility();
!!!215040.cpp!!!	set_GetVisibility(in v : aVisibility) : bool
#ifdef WITHJAVA
  return JavaSettings::set_GetVisibility(v);
#else
  UmlCom::send_cmd(phpSettingsCmd, setJavaGetvisibilityCmd, v);
  if (UmlCom::read_bool()) {
    _get_visibility = v;
    return TRUE;
  }
  else
    return FALSE;
#endif
!!!215040.java!!!	set_GetVisibility(in v : aVisibility) : bool
  JavaSettings.set_GetVisibility(v);
!!!215168.cpp!!!	getName() : string
  read_if_needed_();
  
  return _get_name;
!!!215168.java!!!	getName() : string
  read_if_needed_();
  
  return _get_name;
!!!215296.cpp!!!	set_GetName(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpGetNameCmd, v);
  if (UmlCom::read_bool()) {
    _get_name = v;
    return TRUE;
  }
  else
    return FALSE;
!!!215296.java!!!	set_GetName(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpGetNameCmd, v);
  UmlCom.check();
  
  _get_name = v;

!!!215424.cpp!!!	setName() : string
  read_if_needed_();
  
  return _set_name;
!!!215424.java!!!	setName() : string
  read_if_needed_();
  
  return _set_name;
!!!215552.cpp!!!	set_SetName(in v : string) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpSetNameCmd, v);
  if (UmlCom::read_bool()) {
    _set_name = v;
    return TRUE;
  }
  else
    return FALSE;
!!!215552.java!!!	set_SetName(in v : string) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpSetNameCmd, v);
  UmlCom.check();

  _set_name = v;
!!!215680.cpp!!!	isGetFinal() : bool
  read_if_needed_();
  
  return _is_get_final;
!!!215680.java!!!	isGetFinal() : bool
  read_if_needed_();
  
  return _is_get_final;
!!!215808.cpp!!!	set_IsGetFinal(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpIsGetFinalCmd, v);
  if (UmlCom::read_bool()) {
    _is_get_final = v;
    return TRUE;
  }
  else
    return FALSE;
!!!215808.java!!!	set_IsGetFinal(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpIsGetFinalCmd,
		  (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _is_get_final = v;
!!!215936.cpp!!!	isSetFinal() : bool
  read_if_needed_();
  
  return _is_set_final;
!!!215936.java!!!	isSetFinal() : bool
  read_if_needed_();
  
  return _is_set_final;
!!!216064.cpp!!!	set_IsSetFinal(in v : bool) : bool
  UmlCom::send_cmd(phpSettingsCmd, setPhpIsSetFinalCmd, v);
  if (UmlCom::read_bool()) {
    _is_set_final = v;
    return TRUE;
  }
  else
    return FALSE;
!!!216064.java!!!	set_IsSetFinal(in v : bool) : bool
  UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._setPhpIsSetFinalCmd,
		  (v) ? (byte) 1 : (byte) 0);
  UmlCom.check();

  _is_set_final = v;
!!!216192.cpp!!!	setVisibility() : aVisibility
#ifdef WITHJAVA
  return JavaSettings::setVisibility();
#else
  read_if_needed_();
  
  return _set_visibility;
#endif
!!!216192.java!!!	setVisibility() : aVisibility
  return JavaSettings.setVisibility();
!!!216320.cpp!!!	set_SetVisibility(in v : aVisibility) : bool
#ifdef WITHJAVA
  return JavaSettings::set_SetVisibility(v);
#else
  UmlCom::send_cmd(phpSettingsCmd, setJavaSetVisibilityCmd, v);
  if (UmlCom::read_bool()) {
    _set_visibility = v;
    return TRUE;
  }
  else
    return FALSE;
#endif
!!!216320.java!!!	set_SetVisibility(in v : aVisibility) : bool
  JavaSettings.set_SetVisibility(v);
!!!216576.cpp!!!	read_() : void
  _root = UmlCom::read_string();
  
  unsigned n;
  unsigned index;
  
  n = UmlCom::read_unsigned();
  
  for (index = 0; index != n; index += 1)
    UmlSettings::_class_stereotypes[index].php = UmlCom::read_string();
  
  _src_content = UmlCom::read_string();
  _ext = UmlCom::read_string();

  _class_decl = UmlCom::read_string();
  _external_class_decl = UmlCom::read_string();
  _enum_decl = UmlCom::read_string();
  _interface_decl = UmlCom::read_string();
  _attr_decl = UmlCom::read_string();
  _enum_item_decl = UmlCom::read_string();
  _rel_decl = UmlCom::read_string();
  _oper_def = UmlCom::read_string();
#ifndef WITHJAVA
  _get_visibility =
#endif
    (aVisibility) UmlCom::read_char();
  _get_name = UmlCom::read_string();
  _is_get_final = UmlCom::read_bool();
#ifndef WITHJAVA
  _set_visibility =
#endif
    (aVisibility) UmlCom::read_char();
  _set_name = UmlCom::read_string();
  _is_set_final = UmlCom::read_bool();
  _is_generate_javadoc_comment = UmlCom::read_bool();
  _req_with_path = UmlCom::read_bool();
  _is_relative_path = UmlCom::read_bool();
  _is_root_relative_path = UmlCom::read_bool();

  _dir_regexp = UmlCom::read_string();
  _dir_regexp_case_sensitive = UmlCom::read_bool();

  _file_regexp = UmlCom::read_string();
  _file_regexp_case_sensitive = UmlCom::read_bool();

  _is_force_namespace_gen = UmlCom::read_bool();
!!!216576.java!!!	read_() : void
  _root = UmlCom.read_string();
  
  int n;
  int index;
  
  n = UmlCom.read_unsigned();
  
  for (index = 0; index != n; index += 1)
    UmlSettings._class_stereotypes[index].php = UmlCom.read_string();
  
  _src_content = UmlCom.read_string();
  _ext = UmlCom.read_string();

  _class_decl = UmlCom.read_string();
  _external_class_decl = UmlCom.read_string();
  _enum_decl = UmlCom.read_string();
  _interface_decl = UmlCom.read_string();
  _attr_decl = UmlCom.read_string();
  _enum_item_decl = UmlCom.read_string();
  _rel_decl = UmlCom.read_string();
  _oper_def = UmlCom.read_string();
  UmlCom.read_char(); // getter visibility
  _get_name = UmlCom.read_string();
  _is_get_final = UmlCom.read_bool();
  UmlCom.read_char(); // setter visibility
  _set_name = UmlCom.read_string();
  _is_set_final = UmlCom.read_bool();
  _is_generate_javadoc_comment = UmlCom.read_bool();
  _req_with_path = UmlCom.read_bool();
  _is_relative_path = UmlCom.read_bool();
  _is_root_relative_path = UmlCom.read_bool();

  _dir_regexp = UmlCom.read_string();
  _dir_regexp_case_sensitive = UmlCom.read_bool();

  _file_regexp = UmlCom.read_string();
  _file_regexp_case_sensitive = UmlCom.read_bool();

  _is_force_namespace_gen = UmlCom.read_bool();
!!!216704.cpp!!!	read_if_needed_() : void
  UmlSettings::read_if_needed_();
  if (!_defined) {
    UmlCom::send_cmd(phpSettingsCmd, getPhpSettingsCmd);
    read_();
    _defined = TRUE;
  }
!!!216704.java!!!	read_if_needed_() : void
  UmlSettings.read_if_needed_();
  if (!_defined) {
    UmlCom.send_cmd(CmdFamily.phpSettingsCmd, PhpSettingsCmd._getPhpSettingsCmd);
    read_();
    _defined = true;
  }
