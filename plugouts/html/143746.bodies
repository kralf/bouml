class UmlClassInstance
!!!207874.cpp!!!	sKind() : string
  return "class instance";
!!!207874.java!!!	sKind() : string
  return "class instance";

!!!198146.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Class instance  <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>");
  
  QCString s = description();

  if (!s.isEmpty()) {
    fw.write("<p>");
    writeq(s);
    fw.write("<br /></p>");
  }

  fw.write("<p>type :");
  type()->write();
  fw.write("</p>");
  
  QValueList<SlotAttribute> va;
  
  attributesValue(va);
  
  if (!va.isEmpty()) {
    fw.write("<p>attributes :</p><ul>\n");
    
    QValueList<SlotAttribute>::Iterator it;
    
    for (it = va.begin(); it != va.end(); ++it) {
      SlotAttribute & slot = *it;

      fw.write("<li>");
      slot.attribute->write();
      fw.write(" = ");
      writeq(slot.value);
      fw.write("</li>\n");
    }
    fw.write("</ul>");
  }
  
  QValueList<SlotRelation> vr;
  
  relationsValue(vr);
  
  if (!vr.isEmpty()) {
    fw.write("<p>relations :</p><ul>\n");
    
    QValueList<SlotRelation>::Iterator it;
    
    for (it = vr.begin(); it != vr.end(); ++it) {
      SlotRelation & slot = *it;

      fw.write("<li>");
      slot.relation->write();
      fw.write(" = ");
      slot.value->write();
      fw.write("</li>\n");
    }
    fw.write("</ul>");
  }

  write_properties();

  unload(FALSE, FALSE);
!!!198146.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Class instance <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>");
  
  String s = description();
  
  if (s.length() != 0) {
    fw.write("<p>");
    writeq(description());
    fw.write("<br /></p>");
  }

  fw.write("<p>type :");
  type().write();
  fw.write("</p>");

  SlotAttribute[] va = attributesValue();
  int n = va.length;
  
  if (n != 0) {
    fw.write("<p>attributes :</p><ul>\n");
    
    while (n-- > 0) {
      SlotAttribute slot = va[n];

      fw.write("<li>");
      slot.attribute.write();
      fw.write(" = ");
      writeq(slot.value);
      fw.write("</li>\n");
    }
    fw.write("</ul>");
  }

  SlotRelation[] vr = relationsValue();
  
  n = vr.length;
  
  if (n != 0) {
    fw.write("<p>relations :</p><ul>\n");
    
    while (n-- > 0) {
      SlotRelation slot = vr[n];

      fw.write("<li>");
      slot.relation.write();
      fw.write(" = ");
      slot.value.write();
      fw.write("</li>\n");
    }
    fw.write("</ul>");
  }
  
  write_properties();

  unload(false, false);

